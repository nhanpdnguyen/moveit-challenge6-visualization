import type { NextPage } from "next";
import Head from "next/head";
import classnames from "classnames";
import { useMemo, useState } from "react";
import { check, DEFAULT_BOARD } from "../lib/checker";
import styles from "../styles/Home.module.css";

interface CellProps {
  index: number;
  moves: string[];
  board: number[];
  symbol: string;
  go: (move: string) => void;
}

const getLastMove = (report: any) => {
  return report.moves[report.moves.length - 1];
};

function Cell({ index, board, moves, symbol, go }: CellProps) {
  const leftSymbol = symbol + "L";
  const rightSymbol = symbol + "R";

  const leftReport = useMemo(
    () => check([...moves, leftSymbol], DEFAULT_BOARD),
    [leftSymbol, moves]
  );
  const rightReport = useMemo(
    () => check([...moves, rightSymbol], DEFAULT_BOARD),
    [moves, rightSymbol]
  );

  const leftReportLastMove = getLastMove(leftReport);
  const rightReportLastMove = getLastMove(rightReport);

  const cellScore = board[index];

  const onLeftClick = () => {
    if (cellScore && !leftReport.error) {
      go(leftSymbol);
    }
  };
  const onRightClick = () => {
    if (cellScore && !rightReport.error) {
      go(rightSymbol);
    }
  };

  return (
    <div className={styles.cell}>
      <div
        title={leftReport.error}
        className={classnames(styles.cellHead, {
          [styles.cellHeadDisabled]: !cellScore || leftReport.error,
        })}
        onClick={onLeftClick}
      >
        L {leftReportLastMove.distance}km {leftReportLastMove.score}pts
      </div>
      <div className={styles.cellContent}>
        <div>{symbol}</div>
        <div className={styles.cellScore}>{cellScore}</div>
      </div>
      <div
       title={rightReport.error}
        className={classnames(styles.cellHead, {
          [styles.cellHeadDisabled]: !cellScore || rightReport.error,
        })}
        onClick={onRightClick}
      >
        R {rightReportLastMove.distance}km {rightReportLastMove.score}pts
      </div>
    </div>
  );
}

const Home: NextPage = () => {
  const [moves, setMoves] = useState<string[]>([]);

  const report = useMemo(() => check(moves, DEFAULT_BOARD), [moves]);

  const currentBoard = useMemo(
    () =>
      report.moves?.length
        ? report.moves[report.moves.length - 1].board
        : DEFAULT_BOARD,
    [report]
  );

  const addMove = (move: string) => {
    setMoves((prevMoves) => [...prevMoves, move]);
  };

  const onReset = () => {
    setMoves([]);
  };

  const onDelete = () => {
    setMoves((prevMoves) => prevMoves.slice(0, -1));
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>MoveIt - Challenge6 - Visualization</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          Welcome to <a href="#">Challenge 6 - O An Quan</a>
        </h1>

        <div>
          <div>
            <div>Moves: {moves.join(" ")}</div>
            <div>Total distance: {report.totalDistance}</div>
            <div>Total scores: {report.totalScore}</div>
          </div>
          <div className={styles.buttonsRow}>
            <button onClick={onReset}>Reset</button>
            <button onClick={onDelete}>Delete last move</button>
          </div>
        </div>

        <div className={styles.board}>
          <div className={styles.king + " " + styles.cellScore}>
            {currentBoard[0]}
          </div>
          <div>
            <div className={styles.row}>
              <Cell
                index={1}
                symbol="A1"
                board={currentBoard}
                moves={moves}
                go={addMove}
              />
              <Cell
                index={2}
                symbol="A2"
                board={currentBoard}
                moves={moves}
                go={addMove}
              />
              <Cell
                index={3}
                symbol="A3"
                board={currentBoard}
                moves={moves}
                go={addMove}
              />
              <Cell
                index={4}
                symbol="A4"
                board={currentBoard}
                moves={moves}
                go={addMove}
              />
              <Cell
                index={5}
                symbol="A5"
                board={currentBoard}
                moves={moves}
                go={addMove}
              />
            </div>
            <div className={styles.row}>
              <Cell
                index={11}
                symbol="B5"
                board={currentBoard}
                moves={moves}
                go={addMove}
              />
              <Cell
                index={10}
                symbol="B4"
                board={currentBoard}
                moves={moves}
                go={addMove}
              />
              <Cell
                index={9}
                symbol="B3"
                board={currentBoard}
                moves={moves}
                go={addMove}
              />
              <Cell
                index={8}
                symbol="B2"
                board={currentBoard}
                moves={moves}
                go={addMove}
              />
              <Cell
                index={7}
                symbol="B1"
                board={currentBoard}
                moves={moves}
                go={addMove}
              />
            </div>
          </div>
          <div className={styles.king + " " + styles.cellScore}>
            {currentBoard[6]}
          </div>
        </div>
      </main>
      <footer className={styles.footer}>
        Made by Nhan (teaam 047) with ðŸ§¡
      </footer>
    </div>
  );
};

export default Home;
